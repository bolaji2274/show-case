name: Deploy to EC2

on:
  push:
    branches: [ main, master ]  # Adjust branch name as needed
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'  # Match your EC2 Node.js version
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci  # Use npm ci for faster, reliable builds
      
    - name: Build application
      run: npm run build
      # env:
      #   VITE_APP_EMAILJS_SERVICE_ID: ${{ secrets.VITE_APP_EMAILJS_SERVICE_ID }}
      #   VITE_APP_EMAILJS_TEMPLATE_ID: ${{ secrets.VITE_APP_EMAILJS_TEMPLATE_ID }}
      #   VITE_APP_EMAILJS_PUBLIC_KEY: ${{ secrets.VITE_APP_EMAILJS_PUBLIC_KEY }}
      
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Navigate to app directory
          cd ${{ secrets.EC2_APP_PATH }}
          
          # Create .env file with proper format
          cat > .env << 'EOF'
          VITE_APP_EMAILJS_SERVICE_ID=${{ secrets.VITE_APP_EMAILJS_SERVICE_ID }}
          VITE_APP_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_APP_EMAILJS_TEMPLATE_ID }}
          VITE_APP_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_APP_EMAILJS_PUBLIC_KEY }}
          EOF
          # Verify .env file was created
          echo "Environment file contents:"
          cat .env
          # Pull latest changes
          git pull origin main
          
          # Install dependencies (use npm ci for production)
          npm ci
          
          # Build the application
          npm run build
          
          # # Test Nginx configuration
          # sudo nginx -t
          
          # # Reload Nginx to serve new build
          # sudo systemctl reload nginx
          # Set proper permissions
          sudo chown -R www-data:www-data dist/
          sudo chmod -R 755 dist/
          
          # Test Apache configuration
          sudo apache2ctl configtest
          
          # Reload Apache to serve new build
          sudo systemctl reload apache2
          
          echo "Deployment completed successfully!"
          echo "Node.js version: $(node -v)"
          echo "Build directory contents:"
          ls -la dist/
